/*
The MIT License (MIT)

Copyright (c) 2015 Erik Rigtorp <erik@rigtorp.se>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

/*
This code is only for demonstration of deploying header-only libraries. Please do not use.
*/

#pragma once

#include <functional>
#include <memory>

namespace sps
{    
template <class, size_t MaxSize = 1024> class stack_function;

template <class R, class... Args, size_t MaxSize> class stack_function<R(Args...), MaxSize> {
public:
  stack_function() noexcept {}

  stack_function(std::nullptr_t) noexcept {}

  stack_function(const stack_function &other) {
    if (other) {
      other._manager(data, other.data, operation::clone);
      _invoker = other._invoker;
      _manager = other._manager;
    }
  }

  stack_function(stack_function &&other) { other.swap(*this); }

  template <class F> stack_function(F &&f) {
    using f_type = typename std::decay<F>::type;
    static_assert(alignof(f_type) <= alignof(storage), "invalid alignment");
    static_assert(sizeof(f_type) <= sizeof(storage), "storage too small");
    new (&data) f_type(std::forward<F>(f));
    _invoker = &invoke<f_type>;
    _manager = &manage<f_type>;
  }

  ~stack_function() {
    if (_manager) {
      _manager(&data, nullptr, operation::destroy);
    }
  }

  stack_function &operator=(const stack_function &other) {
    stack_function(other).swap(*this);
    return *this;
  }

  stack_function &operator=(stack_function &&other) {
    stack_function(std::move(other)).swap(*this);
    return *this;
  }

  stack_function &operator=(std::nullptr_t) {
    if (_manager) {
      _manager(&data, nullptr, operation::destroy);
      _manager = nullptr;
      _invoker = nullptr;
    }
    return *this;
  }

  template <typename F> stack_function &operator=(F &&f) {
    stack_function(std::forward<F>(f)).swap(*this);
    return *this;
  }

  template <typename F> stack_function &operator=(std::reference_wrapper<F> f) {
    stack_function(f).swap(*this);
    return *this;
  }

  void swap(stack_function &other) {
    std::swap(data, other.data);
    std::swap(_manager, other._manager);
    std::swap(_invoker, other._invoker);
  }

  explicit operator bool() const noexcept { return !!_manager; }

  R operator()(Args... args) {
    if (!_invoker) {
      throw std::bad_function_call();
    }
    return _invoker(&data, std::forward<Args>(args)...);
  }

private:
  enum class operation { clone, destroy };

  using invoker = R (*)(void *, Args &&...);
  using manager = void (*)(void *, void *, operation);
  using storage = typename std::aligned_storage<MaxSize - sizeof(invoker) - sizeof(manager), 8>::type;

  template <typename F>
  static R invoke(void *data, Args &&... args) {
    F &f = *static_cast<F *>(data);
    return f(std::forward<Args>(args)...);
  }

  template <typename F>
  static void manage(void *dest, void *src, operation op) {
    switch (op) {
    case operation::clone:
      new (dest) F(*static_cast<F *>(src));
      break;
    case operation::destroy:
      static_cast<F *>(dest)->~F();
      break;
    }
  }

  storage data;
  invoker _invoker = nullptr;
  manager _manager = nullptr;
};
} // namespace sps
